import { useState } from "react";

export default function CreateBox() {
  const [typeOperation, setTypeOperation] = useState("");
  const [doctor, setDoctor] = useState("");
  const [returnDate, setReturnDate] = useState("");
  const [barcodeInput, setBarcodeInput] = useState("");
  const [barcodes, setBarcodes] = useState([]);
  const [loading, setLoading] = useState(false);
  const [pdfUrl, setPdfUrl] = useState(null);

  const API_URL = process.env.REACT_APP_API_URL;

  const removeBarcode = (index) => setBarcodes(barcodes.filter((_, i) => i !== index));

const handleAddBarcode = async () => {
  const code = barcodeInput.trim();
  if (!code) return;

  const alreadyAdded = barcodes.some(b => b.barcode === code);
  if (alreadyAdded) {
    alert(`–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ${code} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!`);
    return;
  }

  try {
    const res = await fetch(`${API_URL}/instruments/${code}`);
    if (!res.ok) return alert(`–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ${code} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
    const instrument = await res.json();
    setBarcodes([...barcodes, { barcode: code, ...instrument }]);
    setBarcodeInput("");
  } catch (err) {
    console.error(err);
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞");
  }
};


  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setPdfUrl(null);

    try {
      const formData = new FormData();
      formData.append(
        "name",`${typeOperation}_${doctor}_${new Date().toISOString().split("T")[0]}`);

      formData.append("doctorName", doctor);
      formData.append("returnDate", returnDate);
      barcodes.forEach(b => formData.append("instrumentBarcodes", b.barcode));

      const res = await fetch(`${API_URL}/boxes/create`, { method: "POST", body: formData });
      if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");

      const blob = await res.blob();
      setPdfUrl(URL.createObjectURL(blob));
    } catch (err) {
      console.error(err);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∏–∫—Å–∞");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ maxWidth: "1000px", margin: "40px auto", fontFamily: "sans-serif" }}>
      <h1 style={{ textAlign: "center", marginBottom: "20px" }}>–°–æ–∑–¥–∞–Ω–∏–µ –±–∏–∫—Å–∞</h1>

      <div style={{ display: "flex", gap: "20px", alignItems: "flex-start" }}>
        <form onSubmit={handleSubmit} style={{ flex: 1, display: "flex", flexDirection: "column", gap: "15px", border: "1px solid #ccc", padding: "20px", borderRadius: "8px" }}>
          <label>–¢–∏–ø –æ–ø–µ—Ä—Ü–∏–∏:
            <input placeholder="–†–µ–∑–µ–∫—Ü–∏—è" type="text" value={typeOperation} onChange={e => setTypeOperation(e.target.value)} style={{ width: "100%", padding: "8px", marginTop: "5px" }} />
          </label>

          <label>–ò–º—è –¥–æ–∫—Ç–æ—Ä–∞:
            <input type="text" value={doctor} onChange={e => setDoctor(e.target.value)} placeholder="–ò–≤–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π" style={{ width: "100%", padding: "8px", marginTop: "5px" }} />
          </label>

          <label>–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:
            <input type="date" value={returnDate} onChange={e => setReturnDate(e.target.value)} style={{ width: "100%", padding: "8px", marginTop: "5px" }} />
          </label>

          <button type="submit" disabled={loading} style={{ padding: "10px 15px", background: loading ? "#aaa" : "#007bff", color: "white", border: "none", borderRadius: "5px", cursor: loading ? "not-allowed" : "pointer" }}>
            {loading ? "–°–æ–∑–¥–∞–Ω–∏–µ..." : "–°–æ–∑–¥–∞—Ç—å –±–∏–∫—Å"}
          </button>
        </form>

        <div style={{ flex: 1, border: "1px solid #ccc", padding: "20px", borderRadius: "8px" }}>
          <label>–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:
            <input type="text" value={barcodeInput} onChange={e => setBarcodeInput(e.target.value)} onKeyDown={e => { if (e.key === "Enter") { e.preventDefault(); handleAddBarcode(); } }} placeholder="–ü–æ–¥–Ω–µ—Å–∏—Ç–µ —Å–∫–∞–Ω–µ—Ä –∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ" style={{ width: "100%", padding: "8px", marginTop: "5px" }} />
          </label>

          {barcodes.length > 0 && (
            <ul style={{ listStyle: "none", padding: 0, marginTop: "15px" }}>
              {barcodes.map((instrument, i) => (
                <li key={i} style={{ display: "flex", justifyContent: "space-between", alignItems: "center", border: "1px solid #ddd", padding: "10px", borderRadius: "5px", marginBottom: "10px", gap: "10px" }}>
                  {instrument.images?.[0]?.url && <img src={instrument.images[0].url} alt={instrument.name} style={{ width: "60px", height: "60px", objectFit: "cover", borderRadius: "5px", border: "1px solid #ccc" }} />}
                  <div style={{ flex: 1 }}>
                    <strong>{instrument.name || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}</strong><br />
                    <small>–®—Ç—Ä–∏—Ö–∫–æ–¥: {instrument.barcode}</small>
                  </div>
                  <button type="button" onClick={() => removeBarcode(i)} style={{ background: "red", color: "white", border: "none", borderRadius: "5px", padding: "4px 8px", cursor: "pointer" }}>x</button>
                </li>
              ))}
            </ul>
          )}

          {pdfUrl && (
            <div style={{ marginTop: "20px" }}>
              <h3>–ë–∏–∫—Å —Å–æ–∑–¥–∞–Ω!</h3>
              <a href={pdfUrl} download="box.pdf" style={{ display: "inline-block", padding: "10px 15px", background: "green", color: "white", borderRadius: "5px", textDecoration: "none" }}>
                üìÑ –°–∫–∞—á–∞—Ç—å PDF
              </a>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}